import{_ as s,c as a,a as e,o as p}from"./app-Bj_TYjpC.js";const t={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识"><span>基础知识</span></a></h1><h2 id="script" tabindex="-1"><a class="header-anchor" href="#script"><span>script</span></a></h2><p>JavaScript 是一种脚本语言，主要的作用是在网页中添加动态功能。</p><h4 id="引入方式" tabindex="-1"><a class="header-anchor" href="#引入方式"><span>引入方式</span></a></h4><ol><li>内联方式</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>外部方式</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;./a.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>属性：</p><ul><li>async</li><li>defer</li></ul><h2 id="代码结构" tabindex="-1"><a class="header-anchor" href="#代码结构"><span>代码结构</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 注释</span></span>
<span class="line"><span class="token comment">// let a = 1;</span></span>
<span class="line"><span class="token comment">/* let b = 2;*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>分号结尾，可以省略。</li><li>注释:两种注释形势</li></ul><h2 id="现代模式" tabindex="-1"><a class="header-anchor" href="#现代模式"><span>现代模式</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>必须在脚本的第一行。</li><li>不声明变量会报错。</li><li>声明后不可取消。</li><li><code>class</code>和<code>module</code>会自动启动严格模式。</li></ul><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><ul><li>var:变量可以重复声明，并且会涉及到变量提升。</li><li>let:变量不可以重复声明，并且不会涉及变量提升。</li><li>const:变量不可重复声明，不可以重新赋值，并且不会涉及变量提升。但是对象或数组中可以修改属性或值。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">//报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命名限制：</p><ul><li>必须仅包含字母、数字、_、$符号。</li><li>首字符必须是非数字。</li></ul><p>注意：</p><ul><li>变量名区分大小写。</li><li>变量名不能是<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords" target="_blank" rel="noopener noreferrer">保留字</a>。</li><li>允许非英文字母，但是不推荐。</li></ul><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><ul><li>基本数据类型：number、string、boolean、null、undefined、symbol、bigint</li><li>引用数据类型：object</li></ul><h4 id="number" tabindex="-1"><a class="header-anchor" href="#number"><span>Number</span></a></h4><p>表示整数和浮点数。</p><p>特殊值：</p><ul><li>Infinity:正无穷</li><li>-Infinity:负无穷</li><li>NaN:非数字(比较特殊，如果数学表达式中有一个 NaN，则整个表达式的结果就是 NaN。只有一个例外<code>NaN ** 0</code>结果为 1)。</li></ul><h4 id="bigint" tabindex="-1"><a class="header-anchor" href="#bigint"><span>BigInt</span></a></h4><p>在 JavaScript 中，number 无法安全的表示大于 <code>2^53 - 1</code>或小于<code>-2^53 - 1</code>的整数，这被称为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER" target="_blank" rel="noopener noreferrer">“精度丢失”</a>。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9007199254740991</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9007199254740992</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9007199254740991</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9007199254740992</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>BigInt</code>式最近被添加到 JavaScriot 中的。用于表示任意长度的整数。</p><p>格式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> bigNumber <span class="token operator">=</span> <span class="token number">1234567890123456789012345678901234567890n</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h4><p>字符串是由零个或多个字符组成的字符序列。</p><p>在 JavaScript 中，字符串是不可变的。一旦创建，它们不能被修改。有三种包含字符串的方式。</p><ol><li>双引号：<code>&quot;hello&quot;</code>;</li><li>单引号：<code>&#39;hello&#39;</code>;</li><li>反引号：<code>hello</code>;</li></ol><h4 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean"><span>Boolean</span></a></h4><p>布尔值只有两个值：<code>true</code>和<code>false</code>。正确或者不正确。</p><h4 id="null-和-undefined" tabindex="-1"><a class="header-anchor" href="#null-和-undefined"><span>null 和 undefined</span></a></h4><ul><li>null：表示的是空值。</li><li>undefined：表示的是未定义。</li></ul><h4 id="object-类型和-symbol-类型" tabindex="-1"><a class="header-anchor" href="#object-类型和-symbol-类型"><span>Object 类型和 Symbol 类型</span></a></h4><p><code>Object</code>是一个特殊的类型。</p><p>其他所有的数据类型都被称为原始类型，因为他们的值只包含一个单独的内容。Object 则是用于存储数据集合和更复杂的实体。</p><p><code>symbol</code>类型用于创建对象的唯一标识符。</p><h4 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof"><span>typeof</span></a></h4><p>返回参数的类型（string 类型）</p><p>格式：</p><ul><li>typeof x</li><li>typeof(x)</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//&quot;number&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">//&quot;string&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//&quot;boolean&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//&quot;object&quot;//bug ,null不是一个对象是一个特殊值。是一个遗留问题，为了兼容保留的。</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">//&quot;undefined&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&quot;symbol&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&quot;bigint&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> Math<span class="token punctuation">;</span> <span class="token comment">//&quot;object&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> alert<span class="token punctuation">;</span> <span class="token comment">//&quot;function&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h2><h4 id="字符串转换" tabindex="-1"><a class="header-anchor" href="#字符串转换"><span>字符串转换</span></a></h4><p>字符串的转换很简单，只需要使用<code>String()</code>函数即可。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//boolean</span></span>
<span class="line"></span>
<span class="line">value <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//string</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数字转换" tabindex="-1"><a class="header-anchor" href="#数字转换"><span>数字转换</span></a></h4><p>在算术函数和表达式中，会自动进行 number 类型转换。 如：当把除法 <code>/</code> 用于非 number 类型。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;6&quot;</span> <span class="token operator">/</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Number(value) 显式转换</li></ul><p>转换规则：</p><table><thead><tr><th>值</th><th>变成</th></tr></thead><tbody><tr><td>undefined</td><td>NaN</td></tr><tr><td>null</td><td>0</td></tr><tr><td>true 和 false</td><td>1 and 0</td></tr><tr><td>string</td><td>去掉首尾空白字符（空格、换行符<code>\\n</code>、制表符 <code>\\t</code>等）后的纯数字字符串中含有的数字。如果剩余字符串为空，则转换结果为<code>0</code>。否则，将会从剩余字符串中&quot;读取&quot;数字，当类型转换出现 error 时返回<code>NaN</code></td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;   123   &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;123z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN（从字符串“读取”数字，读到 &quot;z&quot; 时出现错误）</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="布尔型转换" tabindex="-1"><a class="header-anchor" href="#布尔型转换"><span>布尔型转换</span></a></h4><p>布尔类型转换时最简单的一个。</p><p>转换规则如下：</p><ul><li>直观上为&quot;空&quot;的值（如<code>0</code>、空字符串、<code>null</code>、<code>undefined</code>和<code>NaN</code>）将变为<code>false</code>。</li><li>其他值变为<code>true</code>。 <table><thead><tr><th>值</th><th>变成</th></tr></thead><tbody><tr><td><code>0</code>、空字符串、<code>null</code>、<code>undefined</code>和<code>NaN</code>）</td><td><code>false</code></td></tr><tr><td>其他值</td><td><code>true</code></td></tr></tbody></table></li></ul><h2 id="运算符、数学运算" tabindex="-1"><a class="header-anchor" href="#运算符、数学运算"><span>运算符、数学运算</span></a></h2><h4 id="术语-一元运算符、二元运算符、运算元" tabindex="-1"><a class="header-anchor" href="#术语-一元运算符、二元运算符、运算元"><span>术语：一元运算符、二元运算符、运算元</span></a></h4><ul><li>运算元：运算符的参数，比如<code>5*2</code> 5 和 2 就是两个运算元，也被称为参数</li><li>一元运算符：只有一个运算元，比如<code>++</code>、<code>--</code></li><li>二元运算符：有两个运算元，比如<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code></li></ul><h4 id="数学运算" tabindex="-1"><a class="header-anchor" href="#数学运算"><span>数学运算</span></a></h4><ul><li>加法：<code>+</code></li><li>减法：<code>-</code></li><li>乘法：<code>*</code></li><li>除法：<code>/</code></li><li>取余：<code>%</code></li><li>求幂：<code>**</code></li></ul><p>取余：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>求幂</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2^2 = 4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="二元运算符" tabindex="-1"><a class="header-anchor" href="#二元运算符"><span>二元运算符 +</span></a></h4><p>通常情况下 <code>+</code> 用于求和。</p><p>但是当运算元中有一个是字符串时，<code>+</code>会进行字符串连接。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#39;123hello&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="一元运算符" tabindex="-1"><a class="header-anchor" href="#一元运算符"><span>一元运算符 +</span></a></h4><p><code>+</code>也可以用于将字符串转换为数字。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//123</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="运算符优先级" tabindex="-1"><a class="header-anchor" href="#运算符优先级"><span>运算符优先级</span></a></h4><table><thead><tr><th>优先级</th><th>名称</th><th>符号</th></tr></thead><tbody><tr><td>...</td><td>...</td><td>...</td></tr><tr><td>15</td><td>一元加号</td><td><code>+</code></td></tr><tr><td>15</td><td>一元负号</td><td><code>-</code></td></tr><tr><td>14</td><td>求幂</td><td><code>**</code></td></tr><tr><td>13</td><td>乘号</td><td><code>*</code></td></tr><tr><td>13</td><td>除号</td><td><code>/</code></td></tr><tr><td>12</td><td>加号</td><td><code>+</code></td></tr><tr><td>12</td><td>减号</td><td><code>-</code></td></tr><tr><td>...</td><td>...</td><td>...</td></tr><tr><td>2</td><td>赋值符</td><td><code>=</code></td></tr><tr><td>...</td><td>...</td><td>...</td></tr></tbody></table><p>这就是为什么<code>+apples + oranges</code>中的一元加号先生效，然后才是二元加法。</p><h4 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h4><p>格式：</p><p>赋值 = 返回一个值</p><p><code>=</code>是一个运算符，但是它的优先级比较低，所以<code>a = b = c</code>会先计算<code>b = c</code>，然后再计算<code>a = b</code>。</p><h4 id="原地修改" tabindex="-1"><a class="header-anchor" href="#原地修改"><span>原地修改</span></a></h4><p>+=、-=、*=、/=等，它们表示的含义都是一样的比如</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">a <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ======等同于</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自增-自减" tabindex="-1"><a class="header-anchor" href="#自增-自减"><span>自增/自减</span></a></h4><p>只能用于变量，不能用于数字。</p><ul><li><code>++</code></li><li><code>--</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">a<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">b<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前置和后置的区别：</p><ul><li>前置：counter++</li><li>后置：++counter</li></ul><p>两者都是做了同一件事：将变量 counter 加 1。区别在于返回值的不同。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> count <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> count2 <span class="token operator">=</span> <span class="token operator">++</span>b<span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h4><p>位运算符把运算元当作 32 位的整数，并在该整数的二进制表现形式上操作。</p><ul><li>按位与（<code>&amp;</code>）</li><li>按位或（<code>|</code>）</li><li>按位异或（<code>^</code>）</li><li>按位非(<code>~</code>)</li><li>左移（<code>&lt;&lt;</code>）</li><li>右移（<code>&gt;&gt;</code>）</li><li>无符号右移（<code>&gt;&gt;&gt;</code>）</li></ul><p>主要用在特殊领域（例如密码学），一般开发不会用到。 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#bitwise_operators" target="_blank" rel="noopener noreferrer">位操作符</a></p><h4 id="逗号运算符" tabindex="-1"><a class="header-anchor" href="#逗号运算符"><span>逗号运算符</span></a></h4><p>逗号运算符用于对两个表达式求值，并返回第二个表达式的值。</p><p>优先级非常低，比 <code>=</code> 还要低。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//7</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="值的比较" tabindex="-1"><a class="header-anchor" href="#值的比较"><span>值的比较</span></a></h2><h4 id="比较结果为-boolean-类型" tabindex="-1"><a class="header-anchor" href="#比较结果为-boolean-类型"><span>比较结果为 Boolean 类型</span></a></h4><p>所有比较运算符均返回布尔值。</p><ul><li>true --- 表示“yes (是)”,</li><li>false --- 表示“no (否)”</li></ul><h4 id="字符串比较" tabindex="-1"><a class="header-anchor" href="#字符串比较"><span>字符串比较</span></a></h4><p>在比较字符串的大小时，JavaScript 会使用字典（dictionary）或词典（lexicographical）顺序进行判定。</p><p>换个说法就是，字符串是按字符逐个进行比较的。</p><ol><li>首先比较两个字符串的首位字符大小。</li><li>如果一方字符较大（或较小），改字符串大于（或小于）另一个字符串，算法结束。</li><li>否则，如果两个字符串的首位字符相等，则继续取出两个字符串个字的后一位字符进行比较。</li><li>重复上述步骤进行比较，直到比较完成某字符的所有字符为止。</li><li>如果两个字符串的字符同时用完，那么则判定它们相等，否则未结束（还有未比较的字符）的字符串更大。</li></ol><p>比较的依照是<code>Unicode</code>编码顺序。</p><h4 id="不同类型间的比较" tabindex="-1"><a class="header-anchor" href="#不同类型间的比较"><span>不同类型间的比较</span></a></h4><p>当不同类型的值进行比较时，JavaScript 会首先将其转换为数字（number）再判定大小。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，字符串 &#39;2&#39; 会被转化为数字 2</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;01&quot;</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，字符串 &#39;01&#39; 会被转化为数字 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于布尔类型值，<code>true</code>会被转化为<code>1</code>，<code>false</code>会被转化为<code>0</code>。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="严格相等" tabindex="-1"><a class="header-anchor" href="#严格相等"><span>严格相等</span></a></h4><p><code>===</code>和<code>!==</code>运算符会同时比较值和类型。</p><h4 id="对-null-和-undefined-的比较" tabindex="-1"><a class="header-anchor" href="#对-null-和-undefined-的比较"><span>对 null 和 undefined 的比较</span></a></h4><p>当使用<code>null</code>或<code>undefined</code>与其他值进行比较时，当使用严格相等比较时，它们不相等。</p><p>当使用非严格相等比较时，JavaScript 存在一个特殊的规则，会判定它们相等。</p><p>当使用数学式或其他比较方法<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>时： <code>null/undefined</code>会被转换为数字:<code>null</code>会被转换为<code>0</code>,<code>undefined</code>被转换为<code>NaN</code>。</p><h4 id="奇怪的结果-null-vs-0" tabindex="-1"><a class="header-anchor" href="#奇怪的结果-null-vs-0"><span>奇怪的结果：null vs 0</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原因：因为在相等性检查<code>==</code>和普通比较符<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>的代码逻辑是相互独立的。进行值的比较时，null 会被转换为数字 0.</p><p>另外 <code>undefined</code>和<code>null</code>在相等性检查<code>==</code>中不会进行任何类型转换，它们只是单纯的相等。</p><h4 id="特殊的-undefined" tabindex="-1"><a class="header-anchor" href="#特殊的-undefined"><span>特殊的 undefined</span></a></h4><p><code>undefined</code>不应该与其他值进行比较。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="避免问题" tabindex="-1"><a class="header-anchor" href="#避免问题"><span>避免问题</span></a></h4><ul><li>除了严格相等 <code>===</code>时，其他有<code>undefined/null</code>比较时都需要小心处理。</li><li>对于取值可能是<code>null/undefined</code>的值请使用<code>===</code>。</li></ul><h2 id="条件分支-if-和" tabindex="-1"><a class="header-anchor" href="#条件分支-if-和"><span>条件分支：if 和&#39;?&#39;</span></a></h2><p>格式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//type会被转换为布尔值</span></span>
<span class="line"><span class="token comment">// 0、&quot;&quot;、null、undefined、NaN、false 为假，其余为真</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三目运算符</p><p>格式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">a <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h2><ul><li><code>&amp;&amp;</code> 逻辑与</li><li><code>||</code> 逻辑或</li><li><code>!</code> 逻辑非</li></ul><h4 id="逻辑或" tabindex="-1"><a class="header-anchor" href="#逻辑或"><span>逻辑或</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">result <span class="token operator">=</span> a <span class="token operator">||</span> b <span class="token operator">||</span> c<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或运算符<code>||</code>做了如下的事情</p><ul><li>从左到右依次计算操作数。</li><li>处理每一个操作数时，都会将其转换为布尔值。如果结果是<code>true</code>，就停止计算，返回这个操作数的初始值。</li><li>如果所有的操作数都被计算过，都是 false 的话，返回最后一个操作数。</li></ul><p>短路求值：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> b <span class="token operator">=</span> a <span class="token operator">||</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//b=2;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="逻辑与" tabindex="-1"><a class="header-anchor" href="#逻辑与"><span>逻辑与</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">result <span class="token operator">=</span> a <span class="token operator">&amp;&amp;</span> b <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>与运算符<code>&amp;&amp;</code>做了如下的事情</p><ul><li>从左到右依次计算操作数。</li><li>处理每一个操作数时，都会将其转换为布尔值。如果结果是<code>false</code>，就停止计算，返回这个操作数的初始值。</li><li>如果所有的操作数都被计算过，都是 true 的话，返回最后一个操作数。</li></ul><h4 id="非" tabindex="-1"><a class="header-anchor" href="#非"><span>!(非)</span></a></h4><p>取反</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">result <span class="token operator">=</span> <span class="token operator">!</span>value<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>将操作数转化为布尔类型：<code>true/false</code></li><li>返回相反的值。</li></ul><h4 id="优先级" tabindex="-1"><a class="header-anchor" href="#优先级"><span>优先级</span></a></h4><p><code>&amp;&amp;</code>比<code>||</code>的优先级要高。所以<code>a &amp;&amp; b || c &amp;&amp; d</code>和<code>(a &amp;&amp; b) || (c &amp;&amp; d)</code>是完全一样的。 <code>!</code>是这三个运算符中优先级最高的。</p><h2 id="空值合并运算符" tabindex="-1"><a class="header-anchor" href="#空值合并运算符"><span>空值合并运算符 ??</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">result <span class="token operator">=</span> a <span class="token operator">??</span> b<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 等价于</span></span>
<span class="line"></span>
<span class="line">result <span class="token operator">=</span> a <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仅当<code>a</code>为<code>null/undefined</code>时，返回<code>b</code>，否则返回<code>a</code>。</p><p>与 <code>||</code>的区别</p><ul><li><code>||</code>返回第一个 <strong>真</strong> 值</li><li><code>??</code>返回第一个 <strong>已定义</strong> 的值</li></ul><p><strong>注意：</strong> <code>??</code>和<code>||</code>的优先级是相通的，但是不要吧<code>??</code>、<code>||</code>、<code>&amp;&amp;</code>一起使用，除非你明确知道判断的顺序。</p><h2 id="循环-while、for、do-while" tabindex="-1"><a class="header-anchor" href="#循环-while、for、do-while"><span>循环 while、for、do...while</span></a></h2><h4 id="while" tabindex="-1"><a class="header-anchor" href="#while"><span>while</span></a></h4><p>格式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="do-while" tabindex="-1"><a class="header-anchor" href="#do-while"><span>do...while</span></a></h4><p>格式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和 <code>while</code>的区别是，<code>do...whild</code>循环至少会执行一次。</p><h3 id="for" tabindex="-1"><a class="header-anchor" href="#for"><span>for</span></a></h3><p>格式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>begin<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> step<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//循环体</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>语句</th><th>具体</th><th>含义</th></tr></thead><tbody><tr><td>begin</td><td>let i = 0</td><td>进入循环时执行一次</td></tr><tr><td>condtion</td><td>i &lt; 3</td><td>在每次循环迭代之前检查，如果是 false,停止循环</td></tr><tr><td>body(循环体)</td><td>console.log(i)</td><td>条件为真时，重复运行</td></tr><tr><td>step</td><td>i++</td><td>在每次循环体迭代后执行</td></tr></tbody></table><p>省略语句：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//省略begin</span></span>
<span class="line"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//省略step</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//无限循环</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//无限循环</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="跳出循环" tabindex="-1"><a class="header-anchor" href="#跳出循环"><span>跳出循环</span></a></h4><ul><li><code>break</code>：立即退出循环</li><li><code>continue</code>：跳过当前迭代，进入下一次迭代</li></ul><h4 id="可控的跳出循环" tabindex="-1"><a class="header-anchor" href="#可控的跳出循环"><span>可控的跳出循环</span></a></h4><p>格式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token literal-property property">labelName</span><span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">outer1</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Value at coords (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>j<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 如果是空字符串或被取消，则中断并跳出这两个循环。</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>input<span class="token punctuation">)</span> <span class="token keyword">break</span> outer<span class="token punctuation">;</span> <span class="token comment">// (*)</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span> outer1<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="switch-语法" tabindex="-1"><a class="header-anchor" href="#switch-语法"><span>switch 语法</span></a></h2><p>作用：替代多个<code>if</code>判断。</p><p>格式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">switch</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token literal-property property">value1</span><span class="token operator">:</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token literal-property property">value2</span><span class="token operator">:</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">        <span class="token comment">//...最终处理位置</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong><code>switch</code>的比对是全量等价比对（<code>===</code>）</p><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><h4 id="函数声明" tabindex="-1"><a class="header-anchor" href="#函数声明"><span>函数声明</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">parameter1<span class="token punctuation">,</span>parameter2<span class="token punctuation">,</span><span class="token operator">...</span>parametersN</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//...函数体</span></span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量"><span>局部变量</span></a></h4><p>在es6之前，js只有一种方式可以制造局部变量，就是通过函数的方式。局部变量牵扯到作用域，就像房子的门的猫眼，内部可以看到外面的情况，但是外部看不到内部。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//形参</span></span>
<span class="line">    <span class="token comment">//...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//实参</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="默认参数-与-返回值" tabindex="-1"><a class="header-anchor" href="#默认参数-与-返回值"><span>默认参数 与 返回值</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">0</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> sum_value <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意这不是错误，函数的参数并不是固定的，可以不传。</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum_value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// sum_value 就是用来接sum的返回值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数命名" tabindex="-1"><a class="header-anchor" href="#函数命名"><span>函数命名</span></a></h4><p>函数就是行为（action）。所以它们的名字通常是动词。它应该简短切尽可能描述函数的作用。</p><ul><li>&quot;get&quot; 返回一个值。</li><li>&quot;calc&quot; 计算某些内容。</li><li>&quot;create&quot; 创建某些内容。</li><li>&quot;check&quot; 检查某些内容并返回boolean的值。</li></ul><h4 id="函数-注释" tabindex="-1"><a class="header-anchor" href="#函数-注释"><span>函数 == 注释</span></a></h4><p>一个函数应该简短且只有一个功能。如果函数功能复杂，那么该函数应该被拆分成几个小的函数。这就是函数式编程的基本思想。</p><h2 id="函数表达式" tabindex="-1"><a class="header-anchor" href="#函数表达式"><span>函数表达式</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//函数声明</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//函数表达式</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数是一个值" tabindex="-1"><a class="header-anchor" href="#函数是一个值"><span>函数是一个值</span></a></h4><p>不管是函数声明还是函数表达式，它们都是一个特殊的值。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> func <span class="token operator">=</span> sayHi<span class="token punctuation">;</span></span>
<span class="line"><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Hello;</span></span>
<span class="line"><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Hello;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="回调函数" tabindex="-1"><a class="header-anchor" href="#回调函数"><span>回调函数</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">ask</span><span class="token punctuation">(</span><span class="token parameter">question<span class="token punctuation">,</span> yes<span class="token punctuation">,</span> no</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span>question<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">yes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token function">no</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">showOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;You agreed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">showCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;You canceled the execution.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用函数表达式</span></span>
<span class="line"><span class="token function">ask</span><span class="token punctuation">(</span><span class="token string">&quot;Do you agree?&quot;</span><span class="token punctuation">,</span> showOk<span class="token punctuation">,</span> showCancel<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数表达式-vs-函数声明" tabindex="-1"><a class="header-anchor" href="#函数表达式-vs-函数声明"><span>函数表达式 VS 函数声明</span></a></h4><p>区别：</p><ul><li>格式不同</li><li>创建的时机不同，函数声明会在代码执行前创建，而函数表达式会在代码执行到它的时候创建。</li></ul><h2 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数"><span>箭头函数</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">,</span><span class="token operator">...</span>argN</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> expression<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//等价于</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">,</span><span class="token operator">...</span>argN</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> expression<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当只有一个参数时，可以省略括号。当只有一个返回语句且是return结果时。可以对函数体进行简写。</p>`,223)]))}const i=s(t,[["render",l],["__file","01.html.vue"]]),d=JSON.parse(`{"path":"/web/js/01.html","title":"JavaScript基础","lang":"zh-CN","frontmatter":{"title":"JavaScript基础","description":"JavaScript基础"},"headers":[{"level":2,"title":"script","slug":"script","link":"#script","children":[]},{"level":2,"title":"代码结构","slug":"代码结构","link":"#代码结构","children":[]},{"level":2,"title":"现代模式","slug":"现代模式","link":"#现代模式","children":[]},{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":2,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[]},{"level":2,"title":"运算符、数学运算","slug":"运算符、数学运算","link":"#运算符、数学运算","children":[]},{"level":2,"title":"值的比较","slug":"值的比较","link":"#值的比较","children":[]},{"level":2,"title":"条件分支：if 和'?'","slug":"条件分支-if-和","link":"#条件分支-if-和","children":[]},{"level":2,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":2,"title":"空值合并运算符 ??","slug":"空值合并运算符","link":"#空值合并运算符","children":[]},{"level":2,"title":"循环 while、for、do...while","slug":"循环-while、for、do-while","link":"#循环-while、for、do-while","children":[{"level":3,"title":"for","slug":"for","link":"#for","children":[]}]},{"level":2,"title":"switch 语法","slug":"switch-语法","link":"#switch-语法","children":[]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":2,"title":"函数表达式","slug":"函数表达式","link":"#函数表达式","children":[]},{"level":2,"title":"箭头函数","slug":"箭头函数","link":"#箭头函数","children":[]}],"git":{"updatedTime":1733410297000,"contributors":[{"name":"qiuyulc","username":"qiuyulc","email":"qiuyulc@gmail.com","commits":2,"url":"https://github.com/qiuyulc"}]},"filePathRelative":"web/js/01.md"}`);export{i as comp,d as data};
