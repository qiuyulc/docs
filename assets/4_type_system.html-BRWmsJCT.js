import{_ as n,c as a,a as e,o as p}from"./app-Bj_TYjpC.js";const t={};function l(o,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="类型系统" tabindex="-1"><a class="header-anchor" href="#类型系统"><span>类型系统</span></a></h1><h2 id="_1-基本类型" tabindex="-1"><a class="header-anchor" href="#_1-基本类型"><span>1.基本类型</span></a></h2><h3 id="_1-1-概述" tabindex="-1"><a class="header-anchor" href="#_1-1-概述"><span>1.1 概述</span></a></h3><p>JavaScript 语言将值分为 8 种类型</p><ul><li>boolean</li><li>string</li><li>number</li><li>bigint</li><li>symbol</li><li>object</li><li>undefined</li><li>null</li></ul><p>TypeScript 继承了 JavaScript 的类型设计，以上 8 种类型可以看做 TypeScript 的基本类型。</p><h3 id="_1-2-boolean-类型" tabindex="-1"><a class="header-anchor" href="#_1-2-boolean-类型"><span>1.2 boolean 类型</span></a></h3><p><code>boolean</code>类型只包含 true 和 false 两个布尔值</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> x<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> y<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，变量 <code>x</code> 和 <code>y</code> 就属于 boolean 类型</p><h3 id="_1-3-string-类型" tabindex="-1"><a class="header-anchor" href="#_1-3-string-类型"><span>1.3 string 类型</span></a></h3><p><code>string</code>类型包含所有字符串。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> x<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> y<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> world</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-number-类型" tabindex="-1"><a class="header-anchor" href="#_1-4-number-类型"><span>1.4 number 类型</span></a></h3><p><code>number</code> 类型包含所有整数和浮点数</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> z<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0xffff</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-bigint-类型" tabindex="-1"><a class="header-anchor" href="#_1-5-bigint-类型"><span>1.5 bigint 类型</span></a></h3><p><code>biging</code> 类型包含所有的整数。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> x<span class="token operator">:</span> bigint <span class="token operator">=</span> <span class="token number">123n</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> y<span class="token operator">:</span> bigint <span class="token operator">=</span> <span class="token number">0xffffn</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>bigint</code> 和 <code>number</code> 类型不兼容。bigint 类型赋值为整数和小数，都会报错</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> x<span class="token operator">:</span> bigint <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span></span>
<span class="line"><span class="token keyword">const</span> y<span class="token operator">:</span> bigint <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：bigint 类型是 ES2020 标准引入的。如果使用这个类型，TypeScript 编译的目标 JavaScript 版本不能低于 ES2020，即编译参数 target 不能低于 es2020</p><h3 id="_1-6-symbol-类型" tabindex="-1"><a class="header-anchor" href="#_1-6-symbol-类型"><span>1.6 symbol 类型</span></a></h3><p><code>symbol</code> 类型包含所有的 Symbol 值</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> x<span class="token operator">:</span> <span class="token builtin">symbol</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_1-7-object-类型" tabindex="-1"><a class="header-anchor" href="#_1-7-object-类型"><span>1.7 object 类型</span></a></h3><p>根据 JavaScript 的设计，object 类型包含了所有对象、数组和函数。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> x<span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> y<span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> z<span class="token operator">:</span> <span class="token function-variable function">object</span> <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，对象、数组、函数都属于 object 类型</p><h3 id="_1-8-undefined-类型-null-类型" tabindex="-1"><a class="header-anchor" href="#_1-8-undefined-类型-null-类型"><span>1.8 undefined 类型，null 类型</span></a></h3><p><code>undefined</code> 和 <code>null</code> 是两个独立类型，它们各自都只有一个值。 undefined 类型只包含一个值<code>undefined</code>,表示未定义(即还未给出定义，以后可能会有定义)</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面示例中，变量 <code>x</code> 就属于 undefined 类型。两个 <code>undefined</code> 里面，第一个是类型，第二个是值。</p><p>null 类型也只包含一个值 <code>null</code>，表示为空(即此处没有值)。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> x<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面示例中，变量<code>x</code> 就属于 null 类型。</p><p>注意：没有声明类型的变量，被赋值为 <code>undefined</code> 或 <code>null</code>，在关闭编译设置 <code>noImplicitAny</code> 和 <code>strictNullChecks</code>时，它们的类型会被推断为 <code>any</code>。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">//关闭 noImplicitAny 和 strictNullChecks</span></span>
<span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">//any</span></span>
<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">//any</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//any</span></span>
<span class="line"><span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//any</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果希望避免这种情况，则需要打开编译选项 strictNullChecks</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">//打开 strictNullChecks</span></span>
<span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span></span>
<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//null</span></span>
<span class="line"><span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//null</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-包装对象类型" tabindex="-1"><a class="header-anchor" href="#_2-包装对象类型"><span>2.包装对象类型</span></a></h2><h3 id="_2-1-包装对象的概念" tabindex="-1"><a class="header-anchor" href="#_2-1-包装对象的概念"><span>2.1 包装对象的概念</span></a></h3><p>JavaScript 的 8 种类型之中， <code>undefeind</code> 和 <code>null</code> 其实是两个特殊值，<code>object</code>属于复合类型，剩下的五种属于原始类型(primitive value)，代表最基本的、不可再分的值。</p><ul><li>boolean</li><li>string</li><li>number</li><li>bigint</li><li>symbol 上面这五种原始类型得值，都有对应的包装对象（wrapper object）。 所谓“包装对象”，指的是这些值在需要时，会自动产生的对象。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#39;e&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面示例中，字符串<code>hello</code> 执行了<code>charAt</code>方法。但是在 JavaScript 语言中，只有对象才有方法，原始类型的值本身没有方法。在调用方法时，字符串会自动转为包装对象，<code>charAt</code>方法其实是定义在包装对象上。</p><p>五种包装对象中，symbol 类型和 bigint 类型无法直接获取他们的包装对象（Symbol()和 Bigint()不能作为构造函数使用），但是剩下的三种可以。</p><ul><li>Boolean()</li><li>String()</li><li>Number()</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">typeOf s <span class="token comment">// &#39;object&#39;</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// &#39;e&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>String()</code>只有当做构造函数使用时(即带有 <code>new</code> 命令调用),才会返回包装对象。如果当做普通函数使用，返回的就是一个普通字符串。</p><h3 id="_2-2-包装对象类型的字面量类型" tabindex="-1"><a class="header-anchor" href="#_2-2-包装对象类型的字面量类型"><span>2.2 包装对象类型的字面量类型</span></a></h3><p>由于包装对象的存在，导致每个原始类型的值都有包装对象和字面量两种情况。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了区分这两种情况，TypeScript 对五种原始类型分别提供了大写和小写两种类型。</p><ul><li>Boolean 和 boolean</li><li>String 和 string</li><li>Number 和 number</li><li>Bigint 和 bigint</li><li>Symbol 和 symbol 其中大写可以包含字面量和包装对象两种情况，小写类型只包含字面量</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> s<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">//正确</span></span>
<span class="line"><span class="token keyword">const</span> s1<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//正确</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> s2<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">//正确</span></span>
<span class="line"><span class="token keyword">const</span> s3<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般建议小写。</p><h2 id="_3-object-类型与-object-类型" tabindex="-1"><a class="header-anchor" href="#_3-object-类型与-object-类型"><span>3. Object 类型与 object 类型</span></a></h2><p>TypeScript 的对象类型也有大写<code>Object</code>和小写<code>object</code>两种。</p><h3 id="_3-1-object-类型" tabindex="-1"><a class="header-anchor" href="#_3-1-object-类型"><span>3.1 Object 类型</span></a></h3><p>大写的<code>Object</code>类型代表 JavaScript 语言里面的广义对象。所有可以转成对象的值，都是<code>Object</code>类型，这囊括了几乎所有的值。你可以把它理解成 JavaScript 中原型链的顶级 Object</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> obbj<span class="token operator">:</span> Object<span class="token punctuation">;</span></span>
<span class="line">obj <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">obj <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span></span>
<span class="line">obj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">obj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function-variable function">obj</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：<code>undefined</code>和<code>null</code>这两个值不能转为对象，其他任何值都可以赋值给<code>Object</code>类型</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> obj<span class="token operator">:</span> Object<span class="token punctuation">;</span></span>
<span class="line">obj <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">//报错</span></span>
<span class="line">obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Object</code>的简写是<code>{}</code></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> obj<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">obj <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">obj <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span></span>
<span class="line">obj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">obj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function-variable function">obj</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-object-类型" tabindex="-1"><a class="header-anchor" href="#_3-2-object-类型"><span>3.2 object 类型</span></a></h3><p>小写的<code>object</code>类型代表 JavaScript 里面的狭义对象，即可以用字面量表示的对象，只包含对象、数组和函数，不包括原始类型的值。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> obj<span class="token operator">:</span> object<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">obj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function-variable function">obj</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">obj <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span></span>
<span class="line">obj <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span></span>
<span class="line">obj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：无论是大写的<code>Object</code>还是小写的<code>object</code>，都只能包含 JavaScript 内置对象原生属性和方法，用户自定义的属性和方法都不存在于这两个类型之中。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> o1<span class="token operator">:</span> Object <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> o2<span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">o1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span></span>
<span class="line">o1<span class="token punctuation">.</span>foo<span class="token punctuation">;</span> <span class="token comment">// 报错</span></span>
<span class="line"></span>
<span class="line">o2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span></span>
<span class="line">o2<span class="token punctuation">.</span>foo<span class="token punctuation">;</span> <span class="token comment">// 报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-undefined-和-null-的特殊性" tabindex="-1"><a class="header-anchor" href="#_4-undefined-和-null-的特殊性"><span>4. undefined 和 null 的特殊性</span></a></h2><p><code>undefined</code> 和 <code>null</code> 既是值，又是类型。</p><p>作为值，他们有一个特殊的地方：任何其他类型的变量都可以赋值为<code>undefined</code>或<code>null</code>;</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">age <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span></span>
<span class="line">age <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是故意这么设计的，目的是为了跟 JavaScript 保持一致。但是这也失去了类型系统的意义。</p><p>为了避免这个问题，可以将<code>strictNullChecks</code>设为 true，打开这个选项之后，<code>undefined</code>和<code>null</code>就不能赋值给其他类型的变量(除了<code>any</code>和<code>unknown</code>)</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// tsc --strictNullChecks app.ts</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">age <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span></span>
<span class="line">age <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-值类型" tabindex="-1"><a class="header-anchor" href="#_5-值类型"><span>5. 值类型</span></a></h2><p>TypeScript 规定，单个值也是一种类型，称为值类型。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line">x <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">//正确</span></span>
<span class="line">x <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span> <span class="token comment">//报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外<code>const</code>命令声明的变量，如果代码中没有注明类型，就会推断该变量是值类型。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// x 的类型是 &quot;https&quot;</span></span>
<span class="line"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token string">&quot;https&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// y 的类型是 string</span></span>
<span class="line"><span class="token keyword">const</span> y<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;https&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过这种推断仅限于赋值为基本类型的时候，如果是对象那就不会推断为值类型</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// x 的类型是 { foo: number }</span></span>
<span class="line"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-联合类型" tabindex="-1"><a class="header-anchor" href="#_6-联合类型"><span>6. 联合类型</span></a></h2><p>联合类型(union types)指的是多个类型组成的一个新类型，使用符号<code>|</code>表示。</p><p>联合类型<code>A|B</code>表示，任何一个类型只要属于<code>A</code>或<code>B</code>，就属于联合类型<code>A|B</code>。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">x <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">//正确</span></span>
<span class="line">x <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span> <span class="token comment">//正确</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型缩小：</p><p>在联合类型中可能会出现<code>string|number</code>的情况，这时候如果我们直接调用某一个类型的方法，那么就会报错。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">getPort</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//报错</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 id 有可能是一个 number，所以我们需要进一步限制 id 的类型。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">getPort</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> id <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//正确</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-交叉类型" tabindex="-1"><a class="header-anchor" href="#_7-交叉类型"><span>7. 交叉类型</span></a></h2><p>交叉类型(intersectionn types) 值得多个类型组成的一个新类型，使用符号<code>&amp;</code>表示。</p><p>交叉类型<code>A&amp;B</code>标识，任何一个类型必须同时属于<code>A</code>和<code>B</code>,才属于交叉类型<code>A&amp;B</code>,即交叉类型同时满足<code>A</code>和<code>B</code>的特征。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面的示例中，变量 <code>x</code> 同时是数值和字符串，这当然是不可能的，所以 TypeScript 会认为 <code>x</code> 的类型实际上是 <code>never</code></p><p>主要用途：表示对象的合成。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> obj<span class="token operator">:</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> bar<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  foo<span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  bar<span class="token operator">:</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>交叉类型常常 用来为对象类型添加新属性。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> bar<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，类型 <code>B</code> 是一个交叉类型，用来在 <code>A</code> 的基础上增加了属性 <code>bar</code></p><h2 id="_8-type-命令" tabindex="-1"><a class="header-anchor" href="#_8-type-命令"><span>8. type 命令</span></a></h2><p><code>type</code> 命令用来定义一个类型的别名。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Age</span> <span class="token operator">=</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> age<span class="token operator">:</span> Age <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>别名不允许重名</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">;</span> <span class="token comment">//报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>别名的作用域是块级作用域。这也意味着块内部定义的别名，影响不到外部。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">type</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>别名也支持表达式，可以在定义一个别名时，使用另一个别名。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">World</span> <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Greeting</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>World<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>type</code> 命令属于类型相关的代码，编译成 JavaScript 的时候，会被全部删除。</p><h2 id="_9-typeof-运算符" tabindex="-1"><a class="header-anchor" href="#_9-typeof-运算符"><span>9. typeof 运算符</span></a></h2><p>JavaScript 语言中，typrof 运算符是一个医院运算符，返回一个字符串，代表操作数的类型。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">typeof</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span> <span class="token comment">//&#39;string&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>JavaScript 里面，<code>typeof</code> 运算符只可能返回八种结果，而且都是字符串。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// &quot;undefined&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// &quot;boolean&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token number">1337</span><span class="token punctuation">;</span> <span class="token comment">// &quot;number&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;string&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// &quot;object&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> parseInt<span class="token punctuation">;</span> <span class="token comment">// &quot;function&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;symbol&quot;</span></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token number">127n</span><span class="token punctuation">;</span> <span class="token comment">// &quot;bigint&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 TypeScript 中将 <code>typeof</code>运算符移植到了类型运算，它的操作数依旧是一个值，但是返回的不是字符串，而是该值的 TypeScript 类型</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> a<span class="token punctuation">;</span> <span class="token comment">//type T0 = {x: number;}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> a<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token comment">//type T1 = number</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>记住一句话就行，JavaScript 中的<code>typeof</code>返回的是变量的类型值，因为返回值是 string 的，TypeScript 的 <code>typeof</code> 返回的是变量的类型，参照上方代码。</p><h2 id="_10-块级类型声明" tabindex="-1"><a class="header-anchor" href="#_10-块级类型声明"><span>10. 块级类型声明</span></a></h2><p>TypeScript 支持块级类型声明，即类型可以声明在代码块(用大括号表示)里面，并且只在当前代码块有效。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> v<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> v<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-类型的兼容" tabindex="-1"><a class="header-anchor" href="#_11-类型的兼容"><span>11. 类型的兼容</span></a></h2><p>TypeScript 的类型存在兼容关系，某些类型可以兼容其他类型。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> b<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=</span> a<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，变量 <code>a</code> 和 <code>b</code> 的类型是不一样的，但是变量 <code>a</code> 赋值给变量 <code>b</code> 并不会报错。这时，我们认为，<code>b</code> 的类型兼容 <code>a</code> 的类型。</p><p>TypeScript 为这种情况定义了一个专门术语。如果类型 <code>A</code> 的值可以赋值给类型 <code>B</code> 那么类型 <code>A</code> 就被称为类型 <code>B</code> 的子类型(subtype)。在上例中，类型 <code>number</code> 就是类型 <code>number|string</code>的子类型。</p><p>TypeScript 的一个规则是，凡是可以使用父类性的地方，都可以使用子类型，但是反过来不行。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token string">&quot;hi&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> b<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// 正确</span></span>
<span class="line">a <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment">// 报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,132)]))}const i=n(t,[["render",l],["__file","4_type_system.html.vue"]]),r=JSON.parse('{"path":"/typescript/4_type_system.html","title":"类型系统","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1.基本类型","slug":"_1-基本类型","link":"#_1-基本类型","children":[{"level":3,"title":"1.1 概述","slug":"_1-1-概述","link":"#_1-1-概述","children":[]},{"level":3,"title":"1.2 boolean 类型","slug":"_1-2-boolean-类型","link":"#_1-2-boolean-类型","children":[]},{"level":3,"title":"1.3 string 类型","slug":"_1-3-string-类型","link":"#_1-3-string-类型","children":[]},{"level":3,"title":"1.4 number 类型","slug":"_1-4-number-类型","link":"#_1-4-number-类型","children":[]},{"level":3,"title":"1.5 bigint 类型","slug":"_1-5-bigint-类型","link":"#_1-5-bigint-类型","children":[]},{"level":3,"title":"1.6 symbol 类型","slug":"_1-6-symbol-类型","link":"#_1-6-symbol-类型","children":[]},{"level":3,"title":"1.7 object 类型","slug":"_1-7-object-类型","link":"#_1-7-object-类型","children":[]},{"level":3,"title":"1.8 undefined 类型，null 类型","slug":"_1-8-undefined-类型-null-类型","link":"#_1-8-undefined-类型-null-类型","children":[]}]},{"level":2,"title":"2.包装对象类型","slug":"_2-包装对象类型","link":"#_2-包装对象类型","children":[{"level":3,"title":"2.1 包装对象的概念","slug":"_2-1-包装对象的概念","link":"#_2-1-包装对象的概念","children":[]},{"level":3,"title":"2.2 包装对象类型的字面量类型","slug":"_2-2-包装对象类型的字面量类型","link":"#_2-2-包装对象类型的字面量类型","children":[]}]},{"level":2,"title":"3. Object 类型与 object 类型","slug":"_3-object-类型与-object-类型","link":"#_3-object-类型与-object-类型","children":[{"level":3,"title":"3.1 Object 类型","slug":"_3-1-object-类型","link":"#_3-1-object-类型","children":[]},{"level":3,"title":"3.2 object 类型","slug":"_3-2-object-类型","link":"#_3-2-object-类型","children":[]}]},{"level":2,"title":"4. undefined 和 null 的特殊性","slug":"_4-undefined-和-null-的特殊性","link":"#_4-undefined-和-null-的特殊性","children":[]},{"level":2,"title":"5. 值类型","slug":"_5-值类型","link":"#_5-值类型","children":[]},{"level":2,"title":"6. 联合类型","slug":"_6-联合类型","link":"#_6-联合类型","children":[]},{"level":2,"title":"7. 交叉类型","slug":"_7-交叉类型","link":"#_7-交叉类型","children":[]},{"level":2,"title":"8. type 命令","slug":"_8-type-命令","link":"#_8-type-命令","children":[]},{"level":2,"title":"9. typeof 运算符","slug":"_9-typeof-运算符","link":"#_9-typeof-运算符","children":[]},{"level":2,"title":"10. 块级类型声明","slug":"_10-块级类型声明","link":"#_10-块级类型声明","children":[]},{"level":2,"title":"11. 类型的兼容","slug":"_11-类型的兼容","link":"#_11-类型的兼容","children":[]}],"git":{"updatedTime":1709194648000,"contributors":[{"name":"Mrlishizhen","username":"Mrlishizhen","email":"718647063@qq.com","commits":3,"url":"https://github.com/Mrlishizhen"}]},"filePathRelative":"typescript/4_type_system.md"}');export{i as comp,r as data};
