import{_ as s,c as a,a as e,o as p}from"./app-Bj_TYjpC.js";const t={};function c(o,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h1><h2 id="原始类型的方法" tabindex="-1"><a class="header-anchor" href="#原始类型的方法"><span>原始类型的方法</span></a></h2><p>JavaScript 中有七种原始类型，分别是 number、string、boolean、undefined、null、symbol、bigint。这七种原始类型是没有方法的。</p><p>但是在开发中，我们经常会对原始类型调用一些方法，比如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//HELLO</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就和上面的结论产生了矛盾，这是为什么呢？</p><p>因为在 js 中，原始类型是不可变得。但是当 JavaScript 发现你是在用原始类型调用方法时，它会创建一个原始类型的临时包装对象。调用对象上的方法，调用结束后临时包装对象被销毁。</p><p>具体步骤：</p><ol><li>创建一个包含字符串字面量的特殊对象，并且具有可用的方法。</li><li>运行方法返回一个新的字符串。</li><li>特殊对象被销毁，只留下原始值。</li></ol><p><strong>注意：</strong> null/undefined 没有任何方法。</p><h2 id="数字类型" tabindex="-1"><a class="header-anchor" href="#数字类型"><span>数字类型</span></a></h2><ul><li>常规数字以 64 位的格式 IEEE-54 存储，也被称为“双精度浮点数”</li><li>Bigint 用于表示任意长度的整数，存在的原因是常规整数不能安全的超过<code>(2^53-1)</code> 或小于 <code>-(2^53-1)</code>。</li></ul><h4 id="tostring-base" tabindex="-1"><a class="header-anchor" href="#tostring-base"><span>toString(base)</span></a></h4><p>方法<code>num.toString(base)</code>返回给定<code>base</code>进制数字系统中<code>num</code>的字符串表现形式。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ff</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//11111111</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>base</code>的范围可以从<code>2</code>到<code>36</code>。默认情况下是<code>10</code>。</p><p>常见的用例如下：</p><ul><li>base = 16 用于十六进制颜色，字符编码等，数字可以是<code>0...9</code>或<code>A...F</code>。</li><li>base = 2 用于调试按位操作，数字可以是<code>0</code>或<code>1</code>。</li><li>base = 36 是最大进制，数字可以是<code>0...9</code>或<code>A...Z</code>。所有拉丁字母都被用于表示数字。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2n9c</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="舍入" tabindex="-1"><a class="header-anchor" href="#舍入"><span>舍入</span></a></h4><ul><li>Math.floor:向下舍入 3.1 变成 3，-1.1 变成-2。</li><li>Math.ceil:向上舍入：3.1 变成 4，-1.1 变成-1。</li><li>Math.round:四舍五入：3.1 变成 3，3.5 变成 4，-1.1 变成-1。</li><li>Math.trunc:去掉小数部分：3.1 变成 3，-1.1 变成-1。</li></ul><p>想把数字舍入到指定位数有两种实现方式：</p><ul><li>乘除法</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1.23456</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>num <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1.23</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>toFixed(n)</li></ul><p>返回的是字符串，如果保留的位数不够会自动补 0。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">12.34</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//12.3</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//12</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token number">12.36</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//12.4</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//12.360</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="不精确的计算" tabindex="-1"><a class="header-anchor" href="#不精确的计算"><span>不精确的计算</span></a></h4><p>在内部，数字是以 64 位格式<a href="http://en.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener noreferrer">IEEE-754</a>存储的，所以正好有 64 位可以存储一个数字：其中 52 位被用于存储这些数字，其中 11 位用于存储小数点的位置，而 1 位用于存储符号。</p><p>如果一个数字真的很大，则可能会溢出 64 位存储，变成一个特殊值<code>Infinity</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//最经典的一个问题</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">==</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0.30000000000000004</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么出现这个问题？</p><p>一个数字以二进制的形式存储在内存中，一个 1 和 0 的序列。但是在十进制数字系统中看起来很简单的<code>0.1</code>，<code>0.2</code>这样的小数，在二进制形式中是无限循环小数。</p><p>这也就是为什么在相加的时候，最后结果不是一个精确的 <code>0.3</code>。IEEE-754 数字格式通过将数字舍入到最接近的可能数字来解决此问题。这些舍入规则通常不允许我们看到‘极小的精度损失’，但他确实存在。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixrd</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//// 0.10000000000000000555</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当两个数字求和时，它们的&#39;精度损失&#39;会叠加起来。这也就是为什么<code>0.1+0.2 != 0.3</code>的原因。</p><p>其实不止是 JavaScript，其他语言也有这个问题，比如 PHP，Java 等。因为它们都是基于相同的数字格式。</p><p>怎么解决问题？</p><p>最可靠的方式是借助方法 toFixed(n)对结果进行舍入。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">+</span>sum<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0.30</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">9999999999999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10000000000000000</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">10000000000000000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">9999999999999999</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// &#39;100011100001101111001001101111110000010000000000000000&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试-isfinite-和-isnan" tabindex="-1"><a class="header-anchor" href="#测试-isfinite-和-isnan"><span>测试 isFinite 和 isNaN</span></a></h4><ul><li><p>isFinite(num) 检查参数是不是一个有效数字 NaN/Infinity/-Infinity 都返回 false</p></li><li><p>isNaN(num) 检查参数是不是一个数字 NaN 返回 true，其他返回 false</p></li><li><p>Object.is(a,b) 比较两个值是否严格相等，类似于<code>===</code>一样对值进行比较。</p><ul><li>适用于 NaN：Object.is(NaN,NaN);//true</li><li>适用 <code>0</code>和<code>-0</code>：从技术上讲这两个并不是一个值，所以 Object.is(0,-0)值为 false</li></ul></li></ul><h4 id="parseint-和-parsefloat" tabindex="-1"><a class="header-anchor" href="#parseint-和-parsefloat"><span>parseInt 和 parseFloat</span></a></h4><ul><li>parseInt(str,radix) radix 的作用是将 str 以 radix 为基数，转换为 10 进制的数字。</li><li>parseFloat(str) 将字符串转换为浮点数，只解析第一个小数点。</li></ul><p>特点：</p><ul><li>都可以将字符串转换为数字，如果转换失败会返回 NaN。</li><li>parseInt 会忽略字符串开头的空格，直到找到第一个非空格字符。如果它不是数字或负号，则返回 NaN。</li><li>parseFloat 和 parseInt 类似，但是 parseFloat 会解析第一个小数点，直到找到非数字字符为止。</li></ul><p>完整的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math" target="_blank" rel="noopener noreferrer">Math</a>对象</p><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><p>在 js 中，文本数据被以字符串的形式存储，单个字符没有单独的类型。</p><p>字符串的内部格式始终是 UTF-16 编码，它不依赖于页面编码。</p><h4 id="引号" tabindex="-1"><a class="header-anchor" href="#引号"><span>引号</span></a></h4><ul><li>&#39;&#39;</li><li>&quot;&quot;</li><li>\`\`</li></ul><h4 id="特殊字符" tabindex="-1"><a class="header-anchor" href="#特殊字符"><span>特殊字符</span></a></h4><ul><li><code>\\n</code> 换行</li><li><code>\\r</code> 在 windows 文本文件中，两个字符<code>\\r\\n</code>的组合表示一个换行。而在非 Windows 操作系统中，它就是<code>\\n</code>。这是历史原因造成的，大多数的 Windows 软件也理解<code>\\n</code>。</li><li><code>\\&#39;</code>,<code>\\&quot;</code> 引号</li><li><code>\\\\</code> 反斜线</li><li><code>\\t</code> 制表符</li><li><code>\\b</code>,<code>\\f</code>,<code>\\v</code>退格，换页，垂直标签---为了兼容性已经不在使用。</li><li><code>-xXX</code> 具有给定十六进制 Unicode<code>XX</code>的 unicode 字符，例如:<code>&#39;\\x7A&#39;</code>和<code>&#39;z&#39;</code>相同。</li><li>uXXXX 以 UTF-16 编码的十六进制代码<code>XXXX</code>的 Unicode 字符，例如<code>\\u0049</code>--- 是版权符号<code>©</code>的 UTF-16 代码。它必须正好是 4 个十六进制数字。</li><li><code>\\u{X...XXXXX}</code>(1 到 6 个十六进制字符) 具有给定 UTF-32 编码的 Unicode 符号。一些罕见的字符用两个 Unicode 符号编码，占用 4 个字节。这样我们就可以插入长代码了。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;\\u00A9&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ©</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;\\u{20331}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 佫，罕见的中国象形文字（长 Unicode）</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;\\u{1F60D}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 😍，笑脸符号（另一个长 Unicode）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串长度" tabindex="-1"><a class="header-anchor" href="#字符串长度"><span>字符串长度</span></a></h4><p><code>length</code>属性表示字符串长度：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">My\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="访问字符" tabindex="-1"><a class="header-anchor" href="#访问字符"><span>访问字符</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//H</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//H</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//charAt在没有访问到字符的时候会返回空字符串串，而str[0]会返回undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串可以使用<code>for...of</code>遍历字符。</p><h4 id="字符串是不可变的" tabindex="-1"><a class="header-anchor" href="#字符串是不可变的"><span>字符串是不可变的</span></a></h4><p>字符串不可变，只能通过新创建的字符串来修改。</p><h4 id="改变大小" tabindex="-1"><a class="header-anchor" href="#改变大小"><span>改变大小</span></a></h4><p><code>toLowerCase()</code>和<code>toUpperCase()</code>方法可以改变大小写。</p><h4 id="查找子字符串" tabindex="-1"><a class="header-anchor" href="#查找子字符串"><span>查找子字符串</span></a></h4><ul><li>str.indexOf(substring,start) 返回子字符串在字符串中第一次出现的位置，如果没有找到返回-1。</li><li>str.lastIndexOf(substring,start) 从字符串的末尾开始搜索到开头。返回第一次出现的位置，从后往前计数。</li></ul><h4 id="includes-startswith-endswith" tabindex="-1"><a class="header-anchor" href="#includes-startswith-endswith"><span>includes,startsWith,endsWith</span></a></h4><ul><li>str.includes(substring,start) 检查字符串是否包含某个字符。</li><li>str.startsWith(substring,start) 检查字符串是否以某个字符开头。</li><li>str.endsWith(substring,start) 检查字符串是否以某个字符结尾。</li></ul><h4 id="获取子字符串" tabindex="-1"><a class="header-anchor" href="#获取子字符串"><span>获取子字符串</span></a></h4><ul><li>str.slice(start,end) 返回从 start 到 end(但不包括)的子字符串。start，end 可以是负数，表示从字符串末尾开始计数。</li><li>str.substring(start,end) 返回从 start 到 end 的子字符串，不支持负数，负数被视为 0。</li><li>substr(start,length) 返回从 strart 开始，取长度为 length 的字符串。start 支持负数，length 不支持负数，负数被视为 0。</li></ul><h4 id="比较字符串" tabindex="-1"><a class="header-anchor" href="#比较字符串"><span>比较字符串</span></a></h4><p>字符串是按照字母顺序逐字比较。比对的是 Unicode 码点。</p><ul><li><code>str.codePointAt(pos)</code> 返回位置<code>pos</code>在 Unicode 中的码数。</li><li><code>String.fromCodePoint(code)</code> 通过 <code>code</code> 创建字符</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Z</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="代理对" tabindex="-1"><a class="header-anchor" href="#代理对"><span>代理对</span></a></h4><p>处理 emoji、罕见的数字或象形文字或其他罕见的符号。 。。。。</p><h4 id="额外的方法" tabindex="-1"><a class="header-anchor" href="#额外的方法"><span>额外的方法</span></a></h4><ul><li><code>str.trim()</code> 去除字符串两端的空格。</li><li><code>str.repeat(n)</code> 重复字符串 n 次。</li><li><code>str.padStart(n, str)</code> 在字符串的开头填充字符，直到达到长度 n。</li><li><code>str.padEnd(n, str)</code> 在字符串的结尾填充字符，直到达到长度 n。</li></ul><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener noreferrer">更多</a></p><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><p>数组是值的有序集合，里面的元素都是按照顺序排列的。</p><h4 id="声明" tabindex="-1"><a class="header-anchor" href="#声明"><span>声明</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-at-获取最后一个元素" tabindex="-1"><a class="header-anchor" href="#使用-at-获取最后一个元素"><span>使用 ‘at’ 获取最后一个元素</span></a></h4><p>新增属性</p><p><code>array.at(n)</code> n 表示数组下标，如果 n 是负数，则从数组末尾开始计数。</p><p>获取最后一个元素：</p><ul><li><code>arr[arr.length-1]</code>;</li><li><code>arr.at(-1)</code>;</li></ul><h4 id="pop-push-shift-unshift" tabindex="-1"><a class="header-anchor" href="#pop-push-shift-unshift"><span>pop/push,shift/unshift</span></a></h4><ul><li><p>pop 删除并返回数组的最后一个元素</p></li><li><p>push 在数组的末尾添加一个或多个元素，并返回新数组的长度</p></li><li><p>shift 删除并返回数组的第一个元素</p></li><li><p>unshift 在数组的开头添加一个或多个元素，并返回新数组的长度</p></li></ul><p>队列是最常见的使用数组的方法之一。末端添加，首部删除。同时也支持栈。尾部添加，尾部删除。</p><h4 id="内部" tabindex="-1"><a class="header-anchor" href="#内部"><span>内部</span></a></h4><p>数组是一种特殊的对象。使用方括号来访问属性<code>arr[0]</code>实际上是来自对象的语法。他其实和<code>obj[key]</code>相同，其中<code>arr</code>是对戏那个，而数字用作键(key)。只是扩展了对象，提供了特殊的方法来处理有序的数据集合以及<code>length</code>属性。本质上来说，它仍然是个对象。</p><h4 id="性能" tabindex="-1"><a class="header-anchor" href="#性能"><span>性能</span></a></h4><p><code>push/pop</code>方法运行的比较快，而<code>shift/unshift</code>比较慢。</p><p>因为<code>shift/unshift</code>修改数据后需要对数组中的数据重新编号。</p><h4 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h4><ul><li>for 循环</li><li>for...of</li><li>for...in <ul><li>for...in 循环会遍历所有的属性，不仅仅是这些数字属性。</li><li>for...in 循环适用于普通对象，并且做了对应的优化，但是不适用于数组，因此速度会慢 10-100 倍。</li></ul></li></ul><h4 id="length" tabindex="-1"><a class="header-anchor" href="#length"><span>length</span></a></h4><p><code>length</code>实际上是最大的数字索引值加一。</p><p>也可以用来清空数组</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="new-array" tabindex="-1"><a class="header-anchor" href="#new-array"><span>new Array()</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>它很少被使用，因为方括号<code>[]</code>更加简洁。而且，这种语法还有一个很棘手的特性。</p><p>如果使用单个数字，它会创建一个<strong>指定长度，却没有任何项</strong>的数组。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 会创建一个 [2] 的数组吗？</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined！没有元素。</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// length 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多维数组" tabindex="-1"><a class="header-anchor" href="#多维数组"><span>多维数组</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最中间的那个数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring"><span>toString</span></a></h4><p>数组有自己的<code>toString</code>方法的实现，会返回以逗号隔开的元素列表。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,3</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;1,2,3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#39;&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组没有<code>Symbol.toPrimitive</code>，也没有<code>valueOf</code>，所以只能执行<code>toSting</code>进行转换。</p><h4 id="不要使用-比较数组" tabindex="-1"><a class="header-anchor" href="#不要使用-比较数组"><span>不要使用 == 比较数组</span></a></h4><p>数组的本质是对象，除非你是引用的同一个数组，否则比较结果都是 false</p><h2 id="数组方法" tabindex="-1"><a class="header-anchor" href="#数组方法"><span>数组方法</span></a></h2><h4 id="splice" tabindex="-1"><a class="header-anchor" href="#splice"><span>splice</span></a></h4><p>从数组中删除元素？</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>deleteCount<span class="token punctuation">,</span>elem1<span class="token punctuation">,</span>elem2<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>start</code> 开始位置</li><li><code>deleteCount</code> 删除的个数</li><li><code>elem1,elem2,...</code> 添加的元素</li><li>支持反向索引，start 可以是负数。</li></ul><h4 id="slice" tabindex="-1"><a class="header-anchor" href="#slice"><span>slice</span></a></h4><p>返回一个新数组，将所有从索引<code>start</code>到<code>end</code>（不包括<code>end</code>）的数组项复制到一个新的数组。<code>start</code>和<code>end</code>都可以是负数。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2,3]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="concat" tabindex="-1"><a class="header-anchor" href="#concat"><span>concat</span></a></h4><p>连接数组。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span>arg2<span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>对象也可以和数组进行合并，需要有三个条件：</p><ul><li>对象必须具有<code>length</code>属性</li><li>对象的属性必须是数字</li><li>[Symbol.isConcatSpreadable] 属性必须为 true</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&quot;something&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;else&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,something,else</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="在数组中搜索" tabindex="-1"><a class="header-anchor" href="#在数组中搜索"><span>在数组中搜索</span></a></h4><ul><li><p>indexOf/lastIndexOf 和 includes</p><p>indexOf/lastIndexOf 返回找到的元素的索引，如果没有找到则返回-1。includes 返回布尔值。</p><p>格式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// from表示开始搜索的位置，默认为0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**注意：**indexOf 和 includes 是使用严格相等<code>===</code>进行比较的。并且 includes 是可以正确处理<code>NaN</code>的，但是 indexOf 不行。</p></li><li><p>find 和 findIndex/findLastIndex</p><p>它们接受一个回调函数，并且返回第一个满足条件的元素。如果没有找到，find 会返回 undefined，而 findIndex/fundLastIndex 会返回-1。</p></li><li><p>filter 它会返回一个新数组，包含所有通过测试的元素。</p></li></ul><h4 id="转换数组" tabindex="-1"><a class="header-anchor" href="#转换数组"><span>转换数组</span></a></h4><ul><li><p>map</p><p>返回一个新数组，每个元素都是回调函数的结果。</p></li><li><p>sort</p><p>对数组进行原地排序，返回排序后的数组</p></li><li><p>reverse</p><p>对数组进行反转，返回反转后的数组</p></li><li><p>split 和 join</p><p>split 将字符串分割成数组，join 将数组连接成字符串。</p></li><li><p>reduce/reduceRight</p><p>用于计算数组中所有元素的总和。 区别是一个是从左到右，一个是从右到左。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> value <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">initial<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="array-isarray" tabindex="-1"><a class="header-anchor" href="#array-isarray"><span>Array.isArray</span></a></h4><p>因为数组是基于对象的，所以使用 typeof 是没有办法判断出来的。 返回结果是 true 或者 false。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object（相同）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="大多数方法都支持-thisarg" tabindex="-1"><a class="header-anchor" href="#大多数方法都支持-thisarg"><span>大多数方法都支持&#39;thisArg&#39;</span></a></h4><p>出了 sort 其他的数组方法都支持 附加参数<code>thisArg</code>。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token comment">// thisArg 是可选的最后一个参数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>thisArg</code>参数的值在<code>func</code>中变为<code>this</code>。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> army <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">minAge</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">maxAge</span><span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">canJoin</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> user<span class="token punctuation">.</span>age <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minAge <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>age <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxAge<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 找到 army.canJoin 返回 true 的 user</span></span>
<span class="line"><span class="token keyword">let</span> soldiers <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>army<span class="token punctuation">.</span>canJoin<span class="token punctuation">,</span> army<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>soldiers<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>soldiers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>soldiers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 23</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="补充方法" tabindex="-1"><a class="header-anchor" href="#补充方法"><span>补充方法</span></a></h4><ul><li><p>some(fn)/every(fn)</p><p>some(fn)只要有一个元素满足条件就返回 true，every(fn)只有所有元素都满足条件才返回 true。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>fill(value,start,end)</p><p>从索引 start 到 end 填充 value。</p></li><li><p>arr.copyWithin(target, start, end);</p><p>start 到 end 的所有元素复制到自身的 target 位置（覆盖现有元素）。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [1, 4, 5, 4, 5]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noopener noreferrer">arr.flat(depth)</a>/<a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap" target="_blank" rel="noopener noreferrer">arr.flatMap(fn)</a>;从多维数组创建一个新的扁平数组。</p></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// expected output: Array [0, 1, 2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// expected output: Array [0, 1, 2, Array [3, Array [4, 5]]]</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// expected output: Array [0, 1, 2, 3, Array [4, 5]]</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// expected output: Array [0, 1, 2, 3, 4, 5]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//flatMap(func)等价于调用map()方法后在调用深度为1的flat()方法。但是会比单独调用这两种方法更高效。</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Expected output: Array [1, 2, 2, 1]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/of" target="_blank" rel="noopener noreferrer">Array.of(value1, value2, value3, ...)</a> 基于可变数量的参数创建一个新的 Array 实例，而不考虑参数的数量或类型。</li></ul><p>完整的<a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener noreferrer">手册</a></p><h2 id="iterable-object-可迭代对象" tabindex="-1"><a class="header-anchor" href="#iterable-object-可迭代对象"><span>Iterable Object（可迭代对象）</span></a></h2><p>**可迭代（Iterable）**对象是数组的泛化。这个概念是说任何对象都可以定制为可在<code>for...of</code>循环中使用的对象。</p><h4 id="symbol-iterator" tabindex="-1"><a class="header-anchor" href="#symbol-iterator"><span>Symbol.iterator</span></a></h4><p><code>Symbol.iterator</code>是用来定义对象可迭代的方法，当对象存在这个方法时，它就可以被<code>for...of</code>运行。</p><ul><li><p>当<code>for..of</code>循环启动时，它就会调用这个方法（如果没有找到，就会报错）。这个方法必须返回一个<strong>迭代器(iterator)</strong> --- 一个有<code>next</code>方法的对象。</p></li><li><p>从此开始，<code>for...of</code>仅适用于这个被返回的对象。</p></li><li><p>当<code>for...of</code>循环希望取得下一个数值，它就调用这个对象的<code>next()</code>方法。</p></li><li><p><code>next</code>方法返回的格式必须是<code>{done:Boolean,value:any}</code>,当<code>done=true</code>时，表示循环结束，否则<code>value</code>是下一个值。</p></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> range <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">range<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">current</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>from<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">last</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>to<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token operator">++</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简化操作：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> range <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>from<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>to<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token operator">++</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> range<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>无穷迭代器：</strong> 将<code>range</code>设置为<code>range.to = Infinity</code>，这时<code>range</code>则称为了无穷迭代器。</p><h4 id="字符串是可迭代的" tabindex="-1"><a class="header-anchor" href="#字符串是可迭代的"><span>字符串是可迭代的</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 触发 4 次，每个字符一次</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// t, then e, then s, then t</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="显式调用迭代器" tabindex="-1"><a class="header-anchor" href="#显式调用迭代器"><span>显式调用迭代器</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 和 for..of 做相同的事</span></span>
<span class="line"><span class="token comment">// for (let char of str) alert(char);</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> iterator <span class="token operator">=</span> str<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> result <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一个接一个地输出字符</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="可迭代-iterable-和类数组-array-like" tabindex="-1"><a class="header-anchor" href="#可迭代-iterable-和类数组-array-like"><span>可迭代（iterable）和类数组（array-like）</span></a></h4><ul><li>Iterable 是实现了<code>Symbol.iterator</code>方法的对象。</li><li>Array-like 是有索引和<code>length</code>属性的对象，所以它们看起来很像数组。</li></ul><h4 id="array-from" tabindex="-1"><a class="header-anchor" href="#array-from"><span>Array.from</span></a></h4><p>格式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> mapFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>Array.from</code>方法从一个类似数组或可迭代对象中创建一个新的，浅拷贝的数组实例。经过它的转换，就可以调用数组的方法了。</li></ul><h2 id="map-and-set-映射和集合" tabindex="-1"><a class="header-anchor" href="#map-and-set-映射和集合"><span>Map and Set(映射和集合)</span></a></h2><h4 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h4><p>Map 是一个带键的数据项集合，就像<code>Object</code>一样。但是它们最大的差别是<code>Map</code>允许任何类型的键(key)。</p><p>它的方法和属性如下：</p><ul><li><code>new Map()</code> —— 创建 map。</li><li><code>map.set(key,value)</code> -- 根据键存储值</li><li><code>map.get(key)</code> 根据键来返回值，如果<code>map</code>中不存在对应的 key，则返回<code>undefined</code>。</li><li><code>map.has(key)</code> 如果<code>key</code>存在则返回<code>true</code>，否则返回<code>false</code>。</li><li><code>map.delete(key)</code> 删除指定的键,并返回<code>true</code>，如果<code>key</code>不存在则返回<code>false</code>。</li><li><code>map.clear()</code> 清空<code>map</code>。</li><li><code>map.size</code> 返回当前元素个数。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;str1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符串键</span></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;num1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数字键</span></span>
<span class="line">map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;bool1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 布尔值键</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 还记得普通的 Object 吗? 它会将键转化为字符串</span></span>
<span class="line"><span class="token comment">// Map 则会保留键的类型，所以下面这两个结果不同：</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;num1&#39;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;str1&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**Map 怎么比较键：**使用 SameValueZero 算法来比较键是否相等。它和严格等于 <code>===</code> 差不多，但区别是<code>NaN</code>被看成是等于<code>NaN</code>。所以<code>NaN</code>也是可以被用作键。</p><p><strong>链式调用：</strong> 每一次<code>map.set</code>调用都会返回 map 本身，所以可以进行链式调用：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;str1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;num1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;bool1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="map-迭代" tabindex="-1"><a class="header-anchor" href="#map-迭代"><span>Map 迭代</span></a></h4><ul><li><code>map.keys()</code>-- 遍历返回一个包含所有键的可迭代对象。</li><li><code>map.values()</code>-- 遍历返回一个包含所有值的可迭代对象。</li><li><code>map.entries()</code> -- 遍历并返回一个包含所有实体<code>[key,value]</code>的可迭代对象，<code>for...of</code>在默认情况下使用的就是这个。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> recipeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token string">&quot;cucumber&quot;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token string">&quot;tomatoes&quot;</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token string">&quot;onion&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//可迭代对象</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> vegetable <span class="token keyword">of</span> recipeMap<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vegetable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cucumber, tomatoes, onion</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> amount <span class="token keyword">of</span> recipeMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 500, 350, 50</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> entry <span class="token keyword">of</span> recipeMap<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cucumber,500 (and so on)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>顺序：</strong> 迭代的顺序和插入值的顺序相同。与普通的<code>Object</code>不同，<code>Map</code>保留了此顺序。</p><h4 id="object-entries-从对象创建-map" tabindex="-1"><a class="header-anchor" href="#object-entries-从对象创建-map"><span>Object.entries:从对象创建 Map</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="object-fromentries-从-map-创建对象" tabindex="-1"><a class="header-anchor" href="#object-fromentries-从-map-创建对象"><span>Object.fromEntries:从 map 创建对象</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token string">&quot;orange&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token string">&quot;meat&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> prices <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{banana: 1, orange: 2, meat: 4}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>Set</span></a></h2><p><code>Set</code>是一个特殊的类型集合 --- “值的集合”（没有键），它的每个值只能出现一次。</p><ul><li><code>new Set(iterable)</code> -- 创建一个<code>set</code>,如果提供了一个<code>iterable</code>对象（通常是一个数组），将会从数组里面复制值到<code>set</code>中。</li><li><code>set.add(value)</code> -- 添加一个值，返回 set 本身。</li><li><code>set.delete(value)</code> -- 删除值，如果<code>value</code>在这个方法调用的时候存在则返回<code>true</code>，否则返回<code>false</code>。</li><li><code>set.has(value)</code> -- 如果<code>value</code>在 set 中返回<code>true</code>，否则返回<code>false</code>。</li><li><code>set.clear()</code> -- 清空 set。</li><li><code>set.size</code> -- 返回元素个数。</li></ul><h4 id="set-迭代-iteration" tabindex="-1"><a class="header-anchor" href="#set-迭代-iteration"><span>Set 迭代（iteration）</span></a></h4><p>我们可以使用<code>for...of</code>或<code>forEach</code>来遍历 Set。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;oranges&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;apples&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bananas&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> set<span class="token punctuation">)</span> <span class="token function">alert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">set</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>set.keys()</code> -- 遍历并返回一个包含所有值的可迭代对象。</li><li><code>set.values()</code> -- 与<code>set.keys()</code>作用相同，这是为了兼容<code>Map</code>。</li><li><code>set.entries()</code> -- 遍历并返回一个包含所有的实体<code>[value,value]</code>的可迭代对象。</li></ul><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结：</span></a></h4><p><code>Map</code> 是一个带键的数据项的集合。</p><p>方法和属性：</p><ul><li><code>new Map([iterable])</code> 创建 map，可选择带有<code>[key,value]</code>对的<code>iterable</code>(例如数组)来进行初始化。</li><li><code>map.set(key,value)</code> 根据键存储值，返回 map 自身。</li><li><code>map.get(key)</code> 根据键来获取值，如果<code>map</code>中不存在对应的 key 就返回<code>undefined</code>。</li><li><code>map.has(key)</code> 根据键来判断是否存在</li><li><code>map.delete(key)</code> 根据键来删除值，如果<code>key</code>存在就返回 true，否则返回<code>false</code>。</li><li><code>map.clear()</code> 清空 map。</li><li><code>map.size</code> 返回当前元素个数。</li></ul><p>与普通对象<code>Object</code>的区别：</p><ul><li>任何键、对象都可以作为键</li><li>有其他的便捷方法，如<code>size</code>属性</li></ul><p><code>Set</code>是一组唯一值的集合</p><p>方法和属性：</p><ul><li><code>new Set([iterable])</code> 创建 set，可选择带有<code>iterable</code>（例如数组）来进行初始化。</li><li><code>set.add(value)</code> 添加一个值，返回 set 本身。</li><li><code>set.delete(value)</code> 删除值，如果<code>value</code>存在则返回<code>true</code>，否则返回<code>false</code>。</li><li><code>set.has(value)</code> 如果<code>value</code>在 set 中返回<code>true</code>，否则返回<code>false</code>。</li><li><code>set.clear()</code> 清空 set。</li><li><code>set.size</code> 返回元素个数。</li></ul><p>在<code>Map</code>和<code>Set</code>中，迭代总是按照值插入的顺序进行的，所以这些集合不是无序的，但是我们不能对元素进行重新排序，也不能直接按编号来获取元素。</p><h2 id="weakmap-和-weakset" tabindex="-1"><a class="header-anchor" href="#weakmap-和-weakset"><span>WeakMap 和 WeakSet</span></a></h2><p><code>WeakMap</code>和<code>WeakSet</code>是<code>Map</code>和<code>Set</code>的“兄弟”版本，它们对于<code>null</code>的垃圾回收（GC）非常重要。</p><h4 id="weakmap" tabindex="-1"><a class="header-anchor" href="#weakmap"><span>WeakMap</span></a></h4><p><code>WeakMap</code>是一种特殊的<code>Map</code>，它的键必须是对象，并且是弱引用。这意味着如果没有其他引用指向这个对象，该对象就可以被垃圾回收。</p><p><code>WeakMap</code>不支持迭代以及<code>keys()</code>、<code>values()</code>、<code>entries()</code>方法。所以没有办法获取<code>WeakMap</code>的所有键或值。</p><p><code>WeakMap</code>只有以下方法：</p><ul><li><code>weakMap.get(key)</code></li><li><code>weakMap.set(key,value)</code></li><li><code>weakMap.delete(key)</code></li><li><code>weakMap.has(key)</code></li></ul><p>为什么会有这些限制？</p><p>因为当一个对象丢失了其他所有引用，那么它就会被垃圾回收机制自动回收。但是技术层面又不能准确知道它何时被回收。</p><p>这些都是由 JavaScript 引擎决定的。所以<code>WeakMap</code>的当前元素的数量是未知的。这也就是为什么不能支持访问<code>WeakMap</code>的所有键/值的方法。</p><p><code>WeakMap</code>的主要应用场景是 额外数据的存储。</p><ul><li>示例 1:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> john <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//记录john的访问次数</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> weakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使用对象作为键</span></span>
<span class="line">weakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>john<span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="weakset" tabindex="-1"><a class="header-anchor" href="#weakset"><span>WeakSet</span></a></h4><p><code>WeakSet</code>的表现类似：</p><ul><li>与<code>Set</code>类似，但是我们只能向<code>WeakSet</code>添加对象（而不能是原始值）。</li><li>对象只能在其他某个（些）地方能被访问的时候，才能留在<code>WeakSet</code>中。</li><li>跟<code>Set</code>一样，<code>WeakSet</code>支持<code>add</code>,<code>has</code>和<code>delete</code>方法，但不支持<code>size</code>和<code>keys()</code>，并且不可迭代。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> visitedSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> john <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> pete <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Pete&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> mary <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Mary&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">visitedSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>john<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John 访问了我们</span></span>
<span class="line">visitedSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pete<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 然后是 Pete</span></span>
<span class="line">visitedSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>john<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John 再次访问</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// visitedSet 现在有两个用户了</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 检查 John 是否来访过？</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>visitedSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>john<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 检查 Mary 是否来访过？</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>visitedSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>mary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span>
<span class="line">john <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// visitedSet 将被自动清理(即自动清除其中已失效的值 john)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>WeakMap</code>和<code>WeakSet</code>最明显的局限性就是不能迭代，并且不能获取所有当前内容。那样可能会造成不便。</p><h2 id="object-keys-object-values-object-entries" tabindex="-1"><a class="header-anchor" href="#object-keys-object-values-object-entries"><span>Object.keys(), Object.values(), Object.entries()</span></a></h2><ul><li>Object.keys(obj) 返回一个包含该对象所有的键的数组。</li><li>Object.values(obj) 返回一个包含该对象所有的值的数组</li><li>Object.entries(obj) 返回一个包含该对象所有[key,value]键值对的数组。</li></ul><p>和 <code>map</code> 的区别：map、set 返回的都是一个可迭代的对象，Object.keys()、Object.values()、Object.entries()返回的都是数组。</p><p><strong>注意：</strong> Object.keys/values/entries 会忽略 symbol 属性。</p><h4 id="转换对象" tabindex="-1"><a class="header-anchor" href="#转换对象"><span>转换对象</span></a></h4><ul><li><code>Object.entries</code>对象转换为[key,value]的键值对数组</li><li><code>Object.fromEntries</code>将数组转换为对象。同样也需要[key,value]格式的数组</li></ul><h2 id="解构赋值" tabindex="-1"><a class="header-anchor" href="#解构赋值"><span>解构赋值</span></a></h2><h4 id="数组解构" tabindex="-1"><a class="header-anchor" href="#数组解构"><span>数组解构</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token punctuation">[</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> name<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//John Smith undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>忽略使用逗号的元素</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token punctuation">[</span>firstName<span class="token punctuation">,</span> <span class="token punctuation">,</span> name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//John undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>等号右侧可以是任何可迭代对象</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token punctuation">[</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>赋值给等号左侧的任何内容</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">[</span>user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> user<span class="token punctuation">.</span>surname<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> user<span class="token punctuation">.</span>surname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//John Smith</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>与.entries()方法进行循环操作</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>用于<code>Map</code>的类似代码更简单，因为 Map 是可迭代的：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">user<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">user<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>交换变量值的技巧</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> guest <span class="token operator">=</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> admin <span class="token operator">=</span> <span class="token string">&quot;Pete&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span>guest<span class="token punctuation">,</span> admin<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>admin<span class="token punctuation">,</span> guest<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>剩余&#39;...&#39;</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token punctuation">[</span>name1<span class="token punctuation">,</span> name2<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Julius&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Caesar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Consul&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Imperator&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>默认值</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token punctuation">[</span>firstName<span class="token punctuation">,</span> surname<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>surname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 默认值</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token punctuation">[</span>name <span class="token operator">=</span> <span class="token string">&quot;Guest&quot;</span><span class="token punctuation">,</span> surname <span class="token operator">=</span> <span class="token string">&quot;Anonymous&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Julius&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Julius（来自数组的值）</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>surname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Anonymous（默认值被使用了）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对象解构" tabindex="-1"><a class="header-anchor" href="#对象解构"><span>对象解构</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token punctuation">{</span><span class="token literal-property property">prop</span><span class="token operator">:</span>varName <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">,</span><span class="token operator">...</span>rest<span class="token punctuation">}</span> <span class="token operator">=</span> object<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="json-方法-tojson" tabindex="-1"><a class="header-anchor" href="#json-方法-tojson"><span>JSON 方法，toJSON</span></a></h2><h4 id="json-stringify" tabindex="-1"><a class="header-anchor" href="#json-stringify"><span>JSON.stringify</span></a></h4><ul><li>JSON.stringify(value, [replacer, space])</li></ul><p>以下属性会被忽略：</p><ol><li>函数属性（方法）</li><li>Symbol 类型的键和值</li><li>存储<code>undefined</code>的属性</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 被忽略</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token comment">// 被忽略</span></span>
<span class="line">  <span class="token literal-property property">something</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">// 被忽略</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}（空对象）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>限制：</p><p>不能有循环引用</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> room <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> meetup <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Conference&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">participants</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ann&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">meetup<span class="token punctuation">.</span>place <span class="token operator">=</span> room<span class="token punctuation">;</span> <span class="token comment">// meetup 引用了 room</span></span>
<span class="line">room<span class="token punctuation">.</span>occupiedBy <span class="token operator">=</span> meetup<span class="token punctuation">;</span> <span class="token comment">// room 引用了 meetup</span></span>
<span class="line"></span>
<span class="line"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>meetup<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: Converting circular structure to JSON</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>replacer</p><ul><li>可以是一个数组，数组中的元素是要被序列化的属性名。</li><li>也可以是一个函数，函数的参数是当前处理的键值对。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> meetup <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">&#39;Conference&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">participants</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>meetup<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//&#39;{&quot;title&quot;:&quot;Conference&quot;}&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 函数</span></span>
<span class="line"><span class="token keyword">let</span> room <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">number</span><span class="token operator">:</span><span class="token number">23</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> meetup <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">&#39;Conference&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">participants</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">place</span><span class="token operator">:</span>room</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">room<span class="token punctuation">.</span>occupiedBy <span class="token operator">=</span> meetup<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>meetup<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">replacer</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">key:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,value:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token string">&#39;occupiedBy&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> value<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>space</p><ul><li>可以是一个数字，指定缩进用的空白字符的数量</li><li>也可以是一个字符串，指定缩进用的字符</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 缩进 2 个空格</span></span>
<span class="line"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#39;{\\n  &quot;name&quot;: &quot;John&quot;,\\n  &quot;age&quot;: 30\\n}&#39;</span></span>
<span class="line"><span class="token comment">// JSON.stringify(user, null, &#39;----&#39;);//&#39;{\\n----&quot;name&quot;: &quot;John&quot;,\\n----&quot;age&quot;: 30\\n}&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义-tojson" tabindex="-1"><a class="header-anchor" href="#自定义-tojson"><span>自定义‘toJSON’</span></a></h4><p>如果对象定义了toJSON方法，在执行JSON.stringify时，会调用该方法，返回值会被序列化。</p><h4 id="json-parse" tabindex="-1"><a class="header-anchor" href="#json-parse"><span>JSON.parse</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> room <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> meetup <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Conference&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  room</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>room<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 23</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>meetup<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">  {</span>
<span class="line">    &quot;title&quot;:&quot;Conference&quot;,</span>
<span class="line">    &quot;room&quot;: 23</span>
<span class="line">  }</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JSON.parse(text, [reviver])</li></ul><p>将JSON字符串解析为JavaScript对象。</p><p>text：要解析的JSON字符串</p><p>reviver：可选参数，函数，用来转换解析出的属性值。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;{&quot;title&quot;:&quot;Conference&quot;,&quot;date&quot;:&quot;2017-11-30T12:00:00.000Z&quot;}&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> meetup <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//{title: &#39;Conference&#39;, date: &#39;2017-11-30T12:00:00.000Z&#39;}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;{&quot;title&quot;:&quot;Conference&quot;,&quot;date&quot;:&quot;2017-11-30T12:00:00.000Z&quot;}&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//嵌套对象同样适用。</span></span>
<span class="line"><span class="token keyword">let</span> meetup <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">===</span><span class="token string">&#39;date&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> value</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,273)]))}const i=s(t,[["render",c],["__file","03.html.vue"]]),u=JSON.parse('{"path":"/web/js/03.html","title":"数据类型","lang":"zh-CN","frontmatter":{"title":"数据类型","description":"数据类型"},"headers":[{"level":2,"title":"原始类型的方法","slug":"原始类型的方法","link":"#原始类型的方法","children":[]},{"level":2,"title":"数字类型","slug":"数字类型","link":"#数字类型","children":[]},{"level":2,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":2,"title":"数组方法","slug":"数组方法","link":"#数组方法","children":[]},{"level":2,"title":"Iterable Object（可迭代对象）","slug":"iterable-object-可迭代对象","link":"#iterable-object-可迭代对象","children":[]},{"level":2,"title":"Map and Set(映射和集合)","slug":"map-and-set-映射和集合","link":"#map-and-set-映射和集合","children":[]},{"level":2,"title":"Set","slug":"set","link":"#set","children":[]},{"level":2,"title":"WeakMap 和 WeakSet","slug":"weakmap-和-weakset","link":"#weakmap-和-weakset","children":[]},{"level":2,"title":"Object.keys(), Object.values(), Object.entries()","slug":"object-keys-object-values-object-entries","link":"#object-keys-object-values-object-entries","children":[]},{"level":2,"title":"解构赋值","slug":"解构赋值","link":"#解构赋值","children":[]},{"level":2,"title":"JSON 方法，toJSON","slug":"json-方法-tojson","link":"#json-方法-tojson","children":[]}],"git":{"updatedTime":1733903843000,"contributors":[{"name":"qiuyulc","username":"qiuyulc","email":"qiuyulc@gmail.com","commits":2,"url":"https://github.com/qiuyulc"}]},"filePathRelative":"web/js/03.md"}');export{i as comp,u as data};
