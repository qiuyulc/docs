import{_ as a,c as n,a as e,o as i}from"./app-Bj_TYjpC.js";const t={};function p(l,s){return i(),n("div",null,s[0]||(s[0]=[e(`<h1 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h1><h2 id="_1-类型声明" tabindex="-1"><a class="header-anchor" href="#_1-类型声明"><span>1.类型声明</span></a></h2><p>TypeScript 代码最明显的特征，就是为 JavaScript 变量加上了类型声明</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> foo<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//函数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">toString</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：变量的值应该和声明的类型一致，如果不一致，TypeScript 就会报错</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> foo<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">//报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>另外，TypeScript 规定，变量只有赋值后才能使用，否则就会报错。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-类型推断" tabindex="-1"><a class="header-anchor" href="#_2-类型推断"><span>2.类型推断</span></a></h2><p>类型声明不是必需的，如果没有，TypeScript 会自己推断类型。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// ts会自动推导它的类型为number</span></span>
<span class="line"></span>
<span class="line">foo <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">//报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-typescript-编译" tabindex="-1"><a class="header-anchor" href="#_3-typescript-编译"><span>3.TypeScript 编译</span></a></h2><p>JavaScript 的运行环境(浏览器和 Node.js)不认识 TypeScript 代码。所以 TypeScript 项目想要运行，必须先转为 JavaScript 代码，这个代码转换的过程就叫做编译(compile)。</p><p>TypeScript 官方没有运行环境，只提供了编译器。编译时会将类型声明和类型相关的代码全部删除，只留下能于宁的 JavaScript 代码，并且不会改变 JavaScript 的运行结果。 所以 TypeScript 的类型检查只存在于编译时。运行时不存在类型检查。</p><h2 id="_4-值与类型" tabindex="-1"><a class="header-anchor" href="#_4-值与类型"><span>4.值与类型</span></a></h2><p>学习 TypeScript 需要分清楚“值”(value) 和 “类型”(type)。</p><p>“类型”是针对“值”的，可以视为是后者的一个元属性。每一个值在 TypeScript 里面都是有类型的。比如，3 是一个值，它的类型是 number。</p><p>TypeScript 代码只涉及类型，不涉及值。所有跟“值”相关的处理，都有 JavaScript 完成。</p><p>TypeScript 编译过程，实际上就是把“类型代码”全部拿掉，只保留“值代码”</p><h2 id="_5-typescript-playground" tabindex="-1"><a class="header-anchor" href="#_5-typescript-playground"><span>5.TypeScript Playground</span></a></h2><p>最简单的 TypeScript 使用方法，就是使用官网的在线编译页面，叫做 <a href="http://www.typescriptlang.org/play/" target="_blank" rel="noopener noreferrer">TypeScript Playground</a>。</p><p>只要打开这个网页，把 TypeScript 代码贴进文本框，它就会在当前页面自动编译出 JavaScript 代码，还可以在浏览器执行编译产物。如果编译报错，它也会给出详细的报错信息。</p><p>这个页面还具有支持完整的 IDE 支持，可以自动语法提示。此外，它支持把代码片段和编译器设置保存成 URL，分享给他人。</p><h2 id="_6-tsc-编译器" tabindex="-1"><a class="header-anchor" href="#_6-tsc-编译器"><span>6.tsc 编译器</span></a></h2><p>TypeScript 官方提供的编译器叫做 tsc,可以将 TypeScript 脚本编译成 JavaScript 脚本。本机想要编译 TypeScript 代码，必须安装 tsc。 根据约定，TypeScript 脚本文件使用.ts 和后缀名，JavaScript 脚本文件使用.js 后缀。tsc 的作用就是把.ts 脚本转变成.js 脚本。</p><h3 id="_6-1-安装" tabindex="-1"><a class="header-anchor" href="#_6-1-安装"><span>6.1 安装</span></a></h3><p>tsc 是一个 npm 模块，安装使用一下命令</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> typescript</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面命令是全局安装 tsc，也可以在项目中将 tsc 安装为一个依赖模块。</p><p>安装完成后，检查一下是否安装成功。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 或者tsc --version</span></span>
<span class="line">tsc <span class="token parameter variable">-v</span></span>
<span class="line">Version <span class="token number">5.1</span>.6</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-帮助信息" tabindex="-1"><a class="header-anchor" href="#_6-2-帮助信息"><span>6.2 帮助信息</span></a></h3><p><code>-h</code> 或 <code>--help</code> 参数输出帮助信息</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">tsc <span class="token parameter variable">-h</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>也可以使用<code>--all</code>展示完整的帮助信息</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">tsc <span class="token parameter variable">--all</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_6-3-编译脚本" tabindex="-1"><a class="header-anchor" href="#_6-3-编译脚本"><span>6.3 编译脚本</span></a></h3><p>使用 <code>tsc</code> 编译脚本</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">tsc app.ts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>会在当前目录下，生成一个 app.js 文件。</p><p><code>tsc</code> 也可以一次编译多个脚本</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">tsc file1.ts file2.ts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>tsc 有很多参数，可以调整编译行为</p><ol><li>--outFile 可以将多个脚本编译为一个 JavaScript 文件</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">tsc file1.ts file2.ts <span class="token parameter variable">--outFile</span> app.js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>--outDir 编译结果默认都保存在当前目录， <code>--outDir</code>参数可以指定保存到其他目录。</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">tsc app.ts <span class="token parameter variable">--outDir</span> dist</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面命令会在 dist 子目录下生成 app.js</p><ol start="3"><li>--target 为了保证编译结果能在各种 JavaScript 引擎运行，tsc 默认会将 TypeScript 代码编译成很低版本的 JavaScript，即 3.0 版本。这通常不是我们想要的结果。 这时可以使用 <code>--target</code> 参数，指定编译后的 JavaScript 版本。建议使用 es2015，或者更新的版本。</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">tsc <span class="token parameter variable">--target</span> es2015 app.ts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_6-4-编译错误的处理" tabindex="-1"><a class="header-anchor" href="#_6-4-编译错误的处理"><span>6.4 编译错误的处理</span></a></h3><p>编译过程中，如果没有报错， <code>tsc</code>命令不会有任何显示。 如果编译报错，<code>tsc</code> 命令就会显示报错信息，但是依旧会生成 JavaScript 脚本。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">app<span class="token punctuation">.</span>ts<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> foo<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line">foo <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码明显有错误，但是 ts 编译是可以的，不过在终端中会提示错误</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">app.ts:2:1 - error TS2322: Type <span class="token string">&#39;string&#39;</span> is not assignable to <span class="token builtin class-name">type</span> <span class="token string">&#39;number&#39;</span><span class="token builtin class-name">.</span></span>
<span class="line"></span>
<span class="line"><span class="token number">2</span> foo <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  ~~~</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">Found <span class="token number">1</span> error <span class="token keyword">in</span> app.ts:2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为 TypeScript 团队认为，编译器的作用只是给出编译错误，至于怎么处理，是开发者需要判断的。</p><p>如果希望出现错误就停止编译，不生成编译产物，可以使用 <code>--noEmitOnError</code> 参数</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">tsc <span class="token parameter variable">--noEmitOnError</span> app.ts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>还有一个参数，<code>--noEmit</code>，只检查类型是否正确，不生成 JavaScript 文件。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">tsc <span class="token parameter variable">--noEmit</span> app.ts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面命令只检查是否有错误，不会生成 js 文件</p><h3 id="_6-5-tsconfig-json" tabindex="-1"><a class="header-anchor" href="#_6-5-tsconfig-json"><span>6.5 tsconfig.json</span></a></h3><p>TypeScript 允许将 <code>tsc</code> 的编译参数，写在配置文件 tsconfig.json 中，只要当前目录中有这个文件，<code>tsc</code> 就会自动读取，所以运行时可以不写参数。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">tsc file1.ts file2.ts <span class="token parameter variable">--outFile</span> dist/app.js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面这个命令写成 tsconfig.json，就是下面这样。</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;file1.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;file2.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;outFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/app.js&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当有这个文件，编译时直接调用 tsc 命令就可以了。</p><h2 id="_7-ts-node-模块" tabindex="-1"><a class="header-anchor" href="#_7-ts-node-模块"><span>7.ts-node 模块</span></a></h2><p><a href="https://github.com/TypeStrong/ts-node" target="_blank" rel="noopener noreferrer">ts-node</a>是一个非官方的 npm 模块，可以直接运行 TypeScript 代码，使用时，可以先全局安装它。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> i <span class="token parameter variable">-g</span> ts-node</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>安装后，就可以直接运行 TypeScript 脚本。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">ts-node script.ts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果不安装也可以直接通过 <code>npx</code> 直接运行</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">npx ts-node script.ts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,74)]))}const c=a(t,[["render",p],["__file","2_basic_usage.html.vue"]]),d=JSON.parse('{"path":"/typescript/2_basic_usage.html","title":"基本用法","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1.类型声明","slug":"_1-类型声明","link":"#_1-类型声明","children":[]},{"level":2,"title":"2.类型推断","slug":"_2-类型推断","link":"#_2-类型推断","children":[]},{"level":2,"title":"3.TypeScript 编译","slug":"_3-typescript-编译","link":"#_3-typescript-编译","children":[]},{"level":2,"title":"4.值与类型","slug":"_4-值与类型","link":"#_4-值与类型","children":[]},{"level":2,"title":"5.TypeScript Playground","slug":"_5-typescript-playground","link":"#_5-typescript-playground","children":[]},{"level":2,"title":"6.tsc 编译器","slug":"_6-tsc-编译器","link":"#_6-tsc-编译器","children":[{"level":3,"title":"6.1 安装","slug":"_6-1-安装","link":"#_6-1-安装","children":[]},{"level":3,"title":"6.2 帮助信息","slug":"_6-2-帮助信息","link":"#_6-2-帮助信息","children":[]},{"level":3,"title":"6.3 编译脚本","slug":"_6-3-编译脚本","link":"#_6-3-编译脚本","children":[]},{"level":3,"title":"6.4 编译错误的处理","slug":"_6-4-编译错误的处理","link":"#_6-4-编译错误的处理","children":[]},{"level":3,"title":"6.5 tsconfig.json","slug":"_6-5-tsconfig-json","link":"#_6-5-tsconfig-json","children":[]}]},{"level":2,"title":"7.ts-node 模块","slug":"_7-ts-node-模块","link":"#_7-ts-node-模块","children":[]}],"git":{"updatedTime":1709135719000,"contributors":[{"name":"Mrlishizhen","username":"Mrlishizhen","email":"718647063@qq.com","commits":2,"url":"https://github.com/Mrlishizhen"}]},"filePathRelative":"typescript/2_basic_usage.md"}');export{c as comp,d as data};
